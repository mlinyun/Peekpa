"""
Django settings for PeekpaBackend project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import datetime
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure--x^6&4^&z3m!gqa)7s!v_lyk8jjxksaqqygi*6pnje36!w)szs'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'drf_yasg',  # 注册 drf_yasg 应用
    'rest_framework',  # 注册 REST framework 应用
    'rest_framework_simplejwt.token_blacklist',  # 注册 JWT 黑名单应用
    # 'apps.api',  # 注册 API 应用
    'apps.peekpauser',  # 注册用户管理应用
    'apps.company',  # 注册公司管理应用
    'apps.job',  # 注册职位管理应用
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'PeekpaBackend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'PeekpaBackend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',  # Django 的数据库引擎
        'NAME': 'peekpa_db',  # 项目需要使用的 PostgresSQL 数据库名
        'USER': 'postgres',  # PostgresSQL 数据库用户名
        'PASSWORD': '123456',  # PostgresSQL 数据库密码
        'HOST': 'localhost',  # PostgresSQL 数据库的主机地址
        'PORT': '5432',  # PostgresSQL 数据库的端口号
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'peekpauser.User'  # 使用自定义的用户模型

# Django REST framework 配置
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),  # 指定默认的渲染器类，将响应数据渲染为 JSON 格式
    # 指定默认的分页类，用于对查询结果进行分页，这里使用 LimitOffsetPagination 类
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 10,  # 指定每页显示的数据条数
    # 指定默认的过滤器后端类，这里使用 DjangoFilterBackend 类
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend']
}

# Django REST framework Simple JWT 配置
SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ['Bearer'],  # 指定认证头的类型，这里使用 Bearer
    'ROTATE_REFRESH_TOKENS': False,  # 是否在每次刷新令牌时轮换 Token
    'BLACKLIST_AFTER_ROTATION': True,  # 是否在轮换 Token 后将旧 Token 加入黑名单
    'USER_ID_FIELD': 'uid',  # 指定用户模型中的用户 uid 字段作为用户的唯一标识
    'USER_ID_CLAIM': 'uid',  # 说明在 Token 中的唯一标识字段是 uid
    'ALGORITHM': 'HS256',  # 指定签名算法
    'SIGNING_KEY': SECRET_KEY,  # 指定签名密钥
    'AUTH_TOKEN_CLASSES': ('apps.api.authentications.PeekpaAccessToken',),  # 将 Token 类引入
    'ACCESS_TOKEN_LIFETIME': datetime.timedelta(days=5),  # 指定访问令牌的有效期 5 天
    'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=1),  # 指定刷新令牌的有效期 1 天
}

# drf-yasg 配置
SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    }
}
